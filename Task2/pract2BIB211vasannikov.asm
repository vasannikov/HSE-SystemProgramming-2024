section .data
    array dq 1, 1, 1, 1, 0, 1, 0, 1, 1, 1     ; массив из 10 слов
    result dq 0                                   ; отдельный элемент для хранения результата

section .text
global main
print_uint:
  xor rcx, rcx ; Обнуление регистра rcx, который будет использоваться для подсчета количества цифр в числе.
  mov r8, 10 ; Загрузка значения 10 в регистр r8, так как мы будем делить на 10 для извлечения цифр.

  .loop: ; Метка для начала цикла.
    xor rdx, rdx ; Очистка регистра rdx, который будет использоваться для хранения остатка от деления.
    div r8 ; Деление содержимого регистров rdx:rax на значение в r8. Результат деления сохраняется в rax, а остаток – в rdx.
    add dl, 0x30 ; Преобразование остатка в символ ASCII (0-9), добавление 48 (0x30) к остатку, чтобы получить соответствующий код ASCII.
    dec rsp ; Уменьшение указателя стека на 1 байт для создания места под хранение следующей цифры.
    mov [rsp], dl; Запись преобразованного остатка (цифры) в стек.
    inc rcx ; Увеличение счетчика цифр.
    test rax, rax ; Проверка остатка от деления. Если остаток не равен нулю, переход к метке .loop.
    jnz .loop ; Конец цикла

  .print_chars_on_stack: ; Метка для вывода цифр со стека.
    xor rax, rax ; Обнуление rax для подготовки системного вызова.
    mov rsi, rsp ; Загрузка указателя стека в регистр rsi.
    mov rdx, rcx ; Загрузка количества напечатанных цифр в rdx.
    push rcx ; Сохранение значения rcx на стеке.
    mov rax, 1 ; Загрузка номера системного вызова (sys_write).
    mov rdi, 1 ; Загрузка номера файлового дескриптора stdout.
    syscall ; Выполнение системного вызова sys_write для вывода цифр на экран.
    pop rcx ; Восстановление значения rcx со стека.
    add rsp, rcx; Освобождение памяти стека после печати цифр.

  ret ; Возврат из функции.
  
main:
    mov rbp, rsp ; агружает значение указателя стека (rsp) в регистр базы стека (rbp). Это нужно для правильной отладки программы.
    mov rcx, 10 ; Загружает значение 10 в регистр rcx. Это значение будет использовано как количество итераций (размер массива).
    xor rsi, rsi ; Используя операцию XOR, обнуляет регистр rsi, который будет использоваться как индекс текущего элемента массива.
    xor rbx, rbx ; Используя операцию XOR, обнуляет регистр rbx, который будет использоваться для хранения суммы остатков.
    
calculate_remainders:
    mov rax, [array + rsi*8] ; Загружает значение текущего элемента массива в регистр rax. 
                             ; Здесь используется адресация с индексом, который умножается на размер элемента массива (в данном случае 8,
                             ; так как используется 64-битная архитектура), а затем добавляется к адресу массива (предполагается, 
                             ; что адрес массива сохранен в памяти перед выполнением данного кода).
    xor rdx, rdx ; Используя операцию XOR, обнуляет регистр rdx, который будет использоваться для хранения остатка от деления.
    mov rdi, 3 ; Загружает значение 3 в регистр rdi. Это значение будет использовано в качестве делителя при делении текущего элемента массива на 3.
    div rdi ; Выполняет деление текущего элемента массива, хранящегося в регистре rax, на 3. Результат деления сохраняется в регистре rax, а остаток от деления - в регистре rdx.
    add rbx, rdx ; Добавляет остаток от деления (хранящийся в регистре rdx) к общей сумме остатков (хранящейся в регистре rbx).
    add rsi, 1 ; Увеличивает значение индекса текущего элемента массива (хранящегося в регистре rsi) на 1.
    cmp rsi, rcx ; Сравнивает значение индекса текущего элемента массива (хранящегося в регистре rsi) с общим количеством итераций (хранящимся в регистре rcx).
    jl calculate_remainders ; Если значение индекса текущего элемента массива (rsi) меньше, чем общее количество итераций (rcx), то переходит обратно к метке calculate_remainders и продолжает выполнение цикла.
    mov [result], rbx  ; Сохраняет значение суммы остатков (хранящейся в регистре rbx) в отдельный элемент данных с именем result. Предполагается, что в памяти уже выделено место для хранения этого значения.
; вывод результата
    mov rax, [result] ; Загружает значение из элемента данных с именем result в регистр rax. Здесь предполагается, что значение суммы остатков уже сохранено в этот элемент данных.
    call print_uint ; Вызывает функцию с именем print_uint, которая предназначена для вывода беззнакового целого числа (значение из регистра rax) на экран или в другой поток вывода.
    mov rax, 60 ; Загружает значение 60 в регистр rax. Это значение будет использовано для системного вызова, который завершает программу.
    syscall ; Выполняет системный вызов с использованием значения, загруженного в регистр rax (в данном случае значение 60). 
            ; Этот системный вызов будет завершать программу. 